<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>Simple POST Form</title>
</head>
<body>
    <form id="myForm">
        <input type="text" id="myInput" name="inputData" placeholder="テキストを入力">
    </form>

    <script>
        document.getElementById('myForm').addEventListener('submit', function(e) {
            e.preventDefault(); // デフォルトの送信をキャンセル
            
            const formData = new FormData(this);
            
            fetch('/your-server-endpoint', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        });

        document.getElementById('myInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('myForm').dispatchEvent(new Event('submit'));
            }
        });
    </script>
</body>
</html>

はい、inputに入力された値を単純にPOST送信する方法を示します。HTMLフォームとJavaScriptを使用して、これを簡単に実現できます。
Simple POST form submissionClick to open code
この例では以下のことを行っています：

シンプルなHTMLフォームを作成し、1つのinput要素を含めています。
フォームのsubmitイベントにリスナーを追加し、デフォルトの送信動作をキャンセルしています。
Enterキーが押されたときにフォームの送信をトリガーするリスナーを追加しています。
フォームが送信されたとき、FormDataオブジェクトを使用してフォームデータを収集し、fetch APIを使用してPOSTリクエストを送信しています。

使用方法：

/your-server-endpoint を実際のサーバーエンドポイントのURLに置き換えてください。
サーバー側で、POSTリクエストを受け取り、inputDataというキーで送信されたデータを処理するロジックを実装してください。
必要に応じて、送信成功時や失敗時の処理をthenとcatchブロック内に追加してください。

注意点：

このコードはクライアントサイドの実装のみです。サーバーサイドでPOSTリクエストを適切に処理する必要があります。
セキュリティ上の理由から、プロダクション環境では適切なバリデーションとサニタイゼーションを実装することが重要です。

この例を基に、必要に応じてカスタマイズすることができます。例えば、送信前のバリデーション、送信後のUI更新、複数のフィールドの処理などを追加できます。
さらに詳しい説明や、特定のユースケースに合わせた調整が必要な場合は、お知らせください。