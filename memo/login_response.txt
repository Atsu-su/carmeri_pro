// app/Http/Responses/LoginResponse.php
namespace App\Http\Responses;

use Laravel\Fortify\Contracts\LoginResponse as LoginResponseContract;

class LoginResponse implements LoginResponseContract
{
    public function toResponse($request)
    {
        return redirect()->intended(
            session('url.intended', '/home')
        );
    }
}
そして、これをFortifyServiceProviderで登録します：
phpCopy// app/Providers/FortifyServiceProvider.php
use App\Http\Responses\LoginResponse;
use Laravel\Fortify\Contracts\LoginResponse as LoginResponseContract;
use Laravel\Fortify\Fortify;

public function boot()
{
    // ログインビューでの前のURLの保存
    Fortify::loginView(function () {
        session(['url.intended' => url()->previous()]);
        return view('auth.login');
    });
}

public function register()
{
    // LoginResponseの登録
    $this->app->singleton(
        LoginResponseContract::class,
        LoginResponse::class
    );
}
この方法の利点：

セッションの値を動的に取得できる
フォールバック値（'/home'）を指定できる
ログイン後の処理をより柔軟にカスタマイズできる

config/fortify.phpのhomeパラメータはシンプルな静的な文字列のみを受け付けるため、セッション値を使用する場合は上記のようにLoginResponseをカスタマイズする方法が適切です。

---------------------------------------------------------------------------------

LoginResponseクラスは、ログイン成功時のレスポンス処理を担当するクラスです。詳しく説明していきます：

コントラクト（インターフェース）について:

phpCopy// Laravel\Fortify\Contracts\LoginResponse
interface LoginResponseContract
{
    /**
     * Create an HTTP response that represents the object.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function toResponse($request);
}
このインターフェースは、ログイン成功時のレスポンスを定義するための契約です。

実装の詳細:

phpCopyclass LoginResponse implements LoginResponseContract
{
    public function toResponse($request)
    {
        // ログイン成功時のリダイレクト処理
        return redirect()->intended(
            session('url.intended', '/home')
        );
    }
}
このクラスの役割は：

ログイン成功時の動作を定義する
toResponseメソッドでリダイレクト先を決定する
セッションに保存された元のURL（url.intended）があればそこへ、なければ'/home'へリダイレクト


Fortifyの処理フロー:

Copyユーザーがログインフォームを送信
↓
Fortifyが認証処理を実行
↓
認証成功
↓
LoginResponseクラスのtoResponseメソッドが呼ばれる
↓
指定されたURLへリダイレクト

具体例:

phpCopy// 例えば以下のようなカスタマイズも可能
class LoginResponse implements LoginResponseContract
{
    public function toResponse($request)
    {
        // APIリクエストの場合
        if ($request->wantsJson()) {
            return response()->json(['message' => 'Login successful']);
        }

        // 管理者の場合
        if (auth()->user()->isAdmin()) {
            return redirect('/admin/dashboard');
        }

        // 通常のユーザーの場合
        return redirect()->intended(
            session('url.intended', '/home')
        );
    }
}
このResponseクラスの主な利点：

ログイン後の振る舞いを一箇所で管理できる
条件に応じて異なるレスポンスを返せる
APIとWebのレスポンスを適切に分けられる
テストがしやすい

つまり、このLoginResponseクラスは、「ログイン成功後に何をするか」を定義する役割を持っています。

---------------------------------------------------------------------------------

これは Laravel の依存性注入コンテナ（DI Container）の仕組みに関係しています。
singleton() メソッドの基本的な形は：
phpCopy$this->app->singleton(抽象, 具象);
この場合：

抽象: LoginResponseContract::class （インターフェース）
具象: LoginResponse::class （実際の実装クラス）

具体的な例で説明すると：
phpCopy// 1. 登録
$this->app->singleton(
    LoginResponseContract::class,  // インターフェース
    LoginResponse::class          // 実装クラス
);

// 2. 使用例
class SomeController 
{
    public function __construct(LoginResponseContract $response)  // ← インターフェースを型指定
    {
        // Laravel が自動的に LoginResponse のインスタンスを注入する
    }
}
これがなぜ必要か：

疎結合の実現:

phpCopy// 良い例：インターフェースに依存
class Controller {
    public function __construct(LoginResponseContract $response) 
    {
        // インターフェースのメソッドだけを使用
    }
}

// 悪い例：具体的なクラスに依存
class Controller {
    public function __construct(LoginResponse $response) 
    {
        // 特定のクラスに強く結合している
    }
}

テストの容易さ:

phpCopy// テスト用のモッククラス
class MockLoginResponse implements LoginResponseContract 
{
    public function toResponse($request)
    {
        return response()->json(['test' => true]);
    }
}

// テスト時に差し替えが可能
$this->app->singleton(
    LoginResponseContract::class,
    MockLoginResponse::class
);

実装の切り替えが容易:

phpCopy// 本番用
$this->app->singleton(
    LoginResponseContract::class,
    ProductionLoginResponse::class
);

// 開発用
$this->app->singleton(
    LoginResponseContract::class,
    DevelopmentLoginResponse::class
);
つまり：

LoginResponseContract::class は「何をするか」を定義
LoginResponse::class は「どのように実行するか」を定義

この分離により：

コードが柔軟になる
テストが書きやすくなる
将来の変更が容易になる
コードの再利用性が高まる

このパターンは Laravel の依存性注入の基本的な使い方の一つです。